// Code generated by "enumer -type=action"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _actionName = "unknownneswlrf"

var _actionIndex = [...]uint8{0, 7, 8, 9, 10, 11, 12, 13, 14}

const _actionLowerName = "unknownneswlrf"

func (i action) String() string {
	if i >= action(len(_actionIndex)-1) {
		return fmt.Sprintf("action(%d)", i)
	}
	return _actionName[_actionIndex[i]:_actionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _actionNoOp() {
	var x [1]struct{}
	_ = x[unknown-(0)]
	_ = x[n-(1)]
	_ = x[e-(2)]
	_ = x[s-(3)]
	_ = x[w-(4)]
	_ = x[l-(5)]
	_ = x[r-(6)]
	_ = x[f-(7)]
}

var _actionValues = []action{unknown, n, e, s, w, l, r, f}

var _actionNameToValueMap = map[string]action{
	_actionName[0:7]:        unknown,
	_actionLowerName[0:7]:   unknown,
	_actionName[7:8]:        n,
	_actionLowerName[7:8]:   n,
	_actionName[8:9]:        e,
	_actionLowerName[8:9]:   e,
	_actionName[9:10]:       s,
	_actionLowerName[9:10]:  s,
	_actionName[10:11]:      w,
	_actionLowerName[10:11]: w,
	_actionName[11:12]:      l,
	_actionLowerName[11:12]: l,
	_actionName[12:13]:      r,
	_actionLowerName[12:13]: r,
	_actionName[13:14]:      f,
	_actionLowerName[13:14]: f,
}

var _actionNames = []string{
	_actionName[0:7],
	_actionName[7:8],
	_actionName[8:9],
	_actionName[9:10],
	_actionName[10:11],
	_actionName[11:12],
	_actionName[12:13],
	_actionName[13:14],
}

// actionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func actionString(s string) (action, error) {
	if val, ok := _actionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _actionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to action values", s)
}

// actionValues returns all values of the enum
func actionValues() []action {
	return _actionValues
}

// actionStrings returns a slice of all String values of the enum
func actionStrings() []string {
	strs := make([]string, len(_actionNames))
	copy(strs, _actionNames)
	return strs
}

// IsAaction returns "true" if the value is listed in the enum definition. "false" otherwise
func (i action) IsAaction() bool {
	for _, v := range _actionValues {
		if i == v {
			return true
		}
	}
	return false
}
